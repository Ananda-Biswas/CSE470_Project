{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anand\\\\Documents\\\\CSE470_Project\\\\project\\\\src\\\\components\\\\AdminLoginForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminLoginForm() {\n  _s();\n  const [formData, setFormData] = useState({\n    username: '',\n    password: ''\n  });\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://localhost:5000/apis/adminuser', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log('User logged in successfully');\n      } else {\n        // If response is not ok, parse the response body as JSON\n        const errorData = await response.json();\n        console.error('Error logging in:', errorData.message);\n      }\n    } catch (error) {\n      console.error('Error logging in:', error);\n    }\n  };\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      [name]: value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"admin\",\n      className: \"tabcontent\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"username\",\n          value: formData.username,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: formData.password,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Log in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminLoginForm, \"a3/rnC5dfLs54lBqqAcP8/s1bm0=\");\n_c = AdminLoginForm;\nvar _c;\n$RefreshReg$(_c, \"AdminLoginForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AdminLoginForm","_s","formData","setFormData","username","password","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","console","log","errorData","json","error","message","handleChange","name","value","target","prevFormData","children","id","className","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","required","_c","$RefreshReg$"],"sources":["C:/Users/anand/Documents/CSE470_Project/project/src/components/AdminLoginForm.js"],"sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function AdminLoginForm() {\r\n\r\n    const [formData, setFormData] = useState({\r\n        username:'',\r\n        password: '',\r\n    });\r\n    \r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n    \r\n        try {\r\n            const response = await fetch('http://localhost:5000/apis/adminuser', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(formData)\r\n            });\r\n    \r\n            if (response.ok) {\r\n                console.log('User logged in successfully');\r\n            } else {\r\n                // If response is not ok, parse the response body as JSON\r\n                const errorData = await response.json();\r\n                console.error('Error logging in:', errorData.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging in:', error);\r\n        }\r\n    };\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setFormData((prevFormData) => ({\r\n          ...prevFormData,\r\n          [name]: value\r\n        }));\r\n      };\r\n  return (\r\n    <div>\r\n        \r\n        <div id=\"admin\" className=\"tabcontent\">\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"username\">Username</label>\r\n                <input type=\"text\" name=\"username\" value={formData.username} onChange={handleChange} required />\r\n\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input type=\"password\" name=\"password\" value={formData.password} onChange={handleChange} required />\r\n\r\n                <input type=\"submit\" value=\"Log in\" />\r\n                </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}